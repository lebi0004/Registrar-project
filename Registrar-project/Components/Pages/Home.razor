@page "/"
@rendermode InteractiveServer
@inject IConfiguration Config


<PageTitle>Registrar</PageTitle>

<h1 class="display-4 p-5 text-center">Students</h1>

<div class="d-grid gap-2 d-md-flex justify-content-md-end mb-5">
    <a href="/add" class="btn btn-primary">+</a>

</div>
<table class="table table-striped border border-1">


    <thead>
        <tr>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Type</th>
            <th>Action</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var contact in contacts)
        {
            <tr>
                <td>@contact.Id</td>
                <td>@contact.FirstName</td>
                <td>@contact.LastName</td>
                <td>@contact.Type</td>
                <td><a href="register/@contact.Id">Register</a></td>
                <td><button class="btn btn-primary" @onclick="() => DeleteContactAsync(contact.Id)"
                        style="margin-bottom: 1.5rem;">Delete Student</button></td>
            </tr>
        }
    </tbody>
</table>





@code {
    List<Contact> contacts = Helper.GetContacts();


    private string? connectionString;

    private List<Contact> notes = [];



    protected override async Task OnInitializedAsync()
    {

        connectionString = Config.GetConnectionString("default");
        contacts = await GetContactsAsync();
        Console.WriteLine(contacts.Count);

        //create the connection
        @* var conn = new MySqlConnection(connectionString); *@
    }

    private async Task<List<Contact>> GetContactsAsync()
    {
        using (var conn = new MySqlConnection(connectionString))
        {
            var sql = "SELECT * FROM student";
            var rows = await conn.QueryAsync<Contact>(sql);

            return rows.ToList();
        }
    }


    private async Task DeleteContactAsync(int id)
    {
        using (var conn = new MySqlConnection(connectionString))
        {
            var sql = "DELETE FROM student WHERE Id = @Id";
            await conn.ExecuteAsync(sql, new { Id = id });
        }
        contacts = await GetContactsAsync();
    }



    private async Task<List<Course>> GetCoursetsAsync()
    {
        using (var conn = new MySqlConnection(connectionString))
        {
            var sql = "SELECT * FROM registration";
            var rows = await conn.QueryAsync<Course>(sql);

            return rows.ToList();
        }
    }


    List<Course> courses = Helper.GetCourses();



}
